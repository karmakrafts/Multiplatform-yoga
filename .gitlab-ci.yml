workflow:
  auto_cancel:
    on_new_commit: interruptible
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "schedule"

stages:
  - publish
  - release

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - .kotlin

publish:linux:
  stage: publish
  interruptible: true
  before_script:
    - export JAVA_HOME=/home/sdks/zulu-17
  script:
    - ./gradlew
      -DpublishDocs.root=/var/www/docs/multiplatform-yoga
      clean
      publish{KotlinMultiplatform,LinuxX64,LinuxArm64}PublicationToGitlabRepository
      publishDocs
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - linux

publish:windows:
  stage: publish
  interruptible: true
  script:
    - ./gradlew
      clean
      publishMingwX64PublicationToGitlabRepository
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - windows

publish:macos:
  stage: publish
  interruptible: true
  before_script:
    - export JAVA_HOME=/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home
  script:
    - ./gradlew
      clean
      publishMacos{X64,Arm64}PublicationToGitlabRepository
      --no-daemon
      --stacktrace
  only:
    - master
  tags:
    - macos

create-release:
  stage: release
  interruptible: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - echo "Fetching project version from libs.versions.toml"
    - export PROJECT_VERSION=$(./gradlew generateVersionInfo --quiet)
  script:
    - echo "Creating release for version $PROJECT_VERSION.$CI_PIPELINE_IID"
  release:
    tag_name: '$(cat .version).$CI_PIPELINE_IID'
    description: '$(cat .version).$CI_PIPELINE_IID'
    ref: '$CI_COMMIT_SHA'
  tags:
    - linux